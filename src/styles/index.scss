@use "global";

.container {
    height: 40vh;
    //fr is only for grid and gives the remaining colums the same width
    // example 1fr + 3fr is 4 fractions

    display: grid;
    //grid-template-columns: 200px 100px;
    //grid-template-columns: auto 100px auto;
    //grid-template-columns: 1fr 100px 1fr;
    //grid-template-rows: 200px 50px 100px;
   //grid-template-rows: 2fr 1fr 3fr;
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(2, 1fr);
    grid-gap: 10px 10px;
    grid-auto-flow: dense;
    margin-bottom: 40px;
}

.item {
    background-color: yellow;
    border-style: solid;
    border-color: green;
    border-width: 1px;

    
}
.item4 {
        background-color: green;
        //grid-column-start: 2;
        //grid-column-end: 4;
        //grid-column: 2 / 4;
        grid-column: 2 / span 2;
        grid-row: 2 / span 2;
    }

 .container2 {
     margin-bottom: 20px;
     min-height: 50vh;
     border-style: solid;
     border-color: black;
     border-width: 1px;
     //justify-content: start;
     //justify-content: center;
     //justify-content: space-around;
     //justify-content: space-evenly;
     //justify-content: space-between;

     // align items only work if heigth is set
     //align-items: center;

     //justify items only change the items but not the grids itself
     justify-items: center;
     display: grid;
     grid-gap: 10px;
     grid-template-columns: repeat(4, auto);

 }   

 .item21 {
    justify-self: stretch;
 }

 .item41 {
     align-self: end;
 }

 .container3 {
     margin-bottom: 20px;
    min-height: 50vh;
    display: grid;
    border-color: black;
    border-style: solid;
    border-width: 1px;
    grid-gap: 10px;

    //autofill leaves empty space if there is few columns
    //auto-fit takes up all available space
    grid-template-columns: [start] repeat(auto-fill, [middle] minmax(150px, 1fr)[end]);
    justify-content: space-between;
    grid-template-areas: 
        "apple orange"
        "banana banana"
        ". mango";
 }

 .itemC {
     grid-area: mango;
 }

 .itemI {
     grid-area: apple;
 }

 .itemD {
     grid-area: banana;
 }

 .itemB {
     grid-column: start / middle;
 }

 .challenge_container {
     margin-bottom: 20px;
     min-height: 50vh;
     display: grid;
     border-color: black;
     border-style: solid;
     border-width: 1px;
     grid-template-columns: repeat(6, 1fr);
     grid-template-rows: repeat(5, 1fr);
     
 }



.red {
    background-color: red;
    grid-column: 2 / span 4;
}

.orange {
    background-color: orange;
    grid-row: 2 / span 4;
    
}

.yellow {
    background-color: yellow;
    grid-column: 2 / span 2;
    grid-row: 2 / span 3;
    
}

.gray {
    background-color: gray;
    grid-column: 4 / span 2;
    grid-row: 3 / span 2;
}

.green {
    background-color: green;
    grid-column: 4 / span 2;
    grid-row: 2 / span 1
}

.blue {
    background-color: blue;
    grid-column: 2 / span 4;
    grid-row: 5 / span 1;
} 

.purple {
    background-color: purple;
    grid-column: 6 /span 1;
    grid-row: 1 / span 5;
}

.challenge_solution {
    min-height: 50vh;
    display: grid;
    border-color: black;
    border-style: solid;
    border-width: 1px;
    grid-template-columns: repeat(6, 1fr);
    grid-template-rows: repeat(5, 1fr);
}

.red2 {
    background-color: red;
    grid-column-start: 2;
    grid-column-end: 6;
}

.blue2 {
    background-color: blue;
    grid-column: 2 / span 4;
}

.purple2 {
    background-color: purple;
    grid-column-start: 6;
    grid-row: 1 / 6;
}

.gray2 {
    background-color: gray;
    grid-area: 3 / 4 / 5 / 6;
}

.green2 {
    background-color: green;
    grid-column: 4 / span 2;
}

.yellow2 {
    background-color: yellow;
    grid-column: 2 / 4;
    grid-row: 2 / 5;
}

.orange2 {
    background-color: orange;
    grid-column-start: 1;
    grid-row-start: 2;
    grid-row-end: 6;
}









    

  

